# Default values for headlamp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of desired pods
replicaCount: 1

image:
  # -- Container image registry
  registry: ghcr.io
  # -- Container image name
  repository: headlamp-k8s/headlamp
  # -- Image pull policy. One of Always, Never, IfNotPresent
  pullPolicy: IfNotPresent
  # -- Container image tag, If "" uses appVersion in Chart.yaml
  tag: "0.37.0"  # ✅ Fixed version (resolves ShiftedDate frontend error)

# -- An optional list of references to secrets in the same namespace to use for pulling any of the images used
imagePullSecrets: []
# -- Overrides the name of the chart
nameOverride: ""
# -- Overrides the full name of the chart
fullnameOverride: ""

# -- Override the deployment namespace; defaults to .Release.Namespace
namespaceOverride: ""

# -- An optional list of init containers to be run before the main containers.
initContainers: []

config:
  # ✅ Runs Headlamp inside the cluster (fixes kubeconfig error)
  inCluster: true
  # -- base url path at which headlamp should run
  baseURL: ""
  oidc:
    # -- Generate OIDC secret if needed
    secret:
      create: true
      name: oidc

    # -- Optional: direct OIDC configuration
    clientID: ""
    clientSecret: ""
    issuerURL: ""
    scopes: ""
    callbackURL: ""
    validatorClientID: ""
    validatorIssuerURL: ""
    useAccessToken: false
    usePKCE: false

    # -- External secret option (disabled)
    externalSecret:
      enabled: false
      name: ""

  # -- directory to look for plugins
  pluginsDir: "/headlamp/plugins"
  # -- Enable Helm integration (off by default)
  enableHelm: false
  # -- Enable live plugin watching
  watchPlugins: false
  # tlsCertPath: "/headlamp-cert/headlamp-ca.crt"
  # tlsKeyPath: "/headlamp-cert/headlamp-tls.key"
  # -- Extra arguments for the container
  extraArgs: []

# ✅ Ensure Headlamp uses in-cluster configuration
extraEnv:
  - name: HEADLAMP_IN_CLUSTER
    value: "true"

# -- Mount Service Account token in pod
automountServiceAccountToken: true

serviceAccount:
  # ✅ Create a dedicated service account
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use
  name: headlamp-sa

clusterRoleBinding:
  # ✅ Bind the service account to cluster-admin
  create: true
  clusterRoleName: cluster-admin
  annotations: {}

# -- Annotations to add to the deployment
deploymentAnnotations: {}

# -- Annotations to add to the pod
podAnnotations: {}

# -- Labels to add to the pod
podLabels: {}

# -- Headlamp pod's Security Context
podSecurityContext:
  {}
  # fsGroup: 2000

# -- Headlamp containers Security Context
securityContext:
  runAsNonRoot: true
  privileged: false
  runAsUser: 100
  runAsGroup: 101
# Uses these defaults if this is empty.
#   allowPrivilegeEscalation: false
#   runAsNonRoot: true
#   seccompProfile:
#     type: RuntimeDefault
#   capabilities:
#     drop:
#       - ALL

service:
  # -- Annotations to add to the service
  annotations: {}
  # -- Kubernetes Service type
  type: ClusterIP
  # -- Kubernetes Service port
  port: 80
  # -- Kubernetes Service clusterIP
  clusterIP: ""
  # -- Kubernetes Service loadBalancerIP
  loadBalancerIP: ""
  # -- Kubernetes Service loadBalancerSourceRanges
  loadBalancerSourceRanges: []
  # -- Kubernetes Service Nodeport
  nodePort: null

# -- Headlamp containers volume mounts
volumeMounts: []

# -- Headlamp pod's volumes
volumes: []

persistentVolumeClaim:
  # -- Enable Persistent Volume Claim
  enabled: false
  # -- Annotations to add to the persistent volume claim (if enabled)
  annotations: {}
  # -- accessModes for the persistent volume claim, eg: ReadWriteOnce, ReadOnlyMany, ReadWriteMany etc.
  accessModes: []
  # -- size of the persistent volume claim, eg: 10Gi. Required if enabled is true.
  size: ""
  # -- storageClassName for the persistent volume claim.
  storageClassName: ""
  # -- selector for the persistent volume claim.
  selector: {}
  # -- volumeMode for the persistent volume claim, eg: Filesystem, Block.
  volumeMode: ""

ingress:
  # -- Enable ingress controller resource
  enabled: false
  # -- Annotations for Ingress resource
  annotations: {}
    # kubernetes.io/tls-acme: "true"

  # -- Additional labels to add to the Ingress resource
  labels: {}
    # app.kubernetes.io/part-of: traefik
    # environment: prod

  # -- Ingress class name. replacement for the deprecated "kubernetes.io/ingress.class" annotation
  ingressClassName: ""

  # -- Hostname(s) for the Ingress resource
  hosts: []
    # - host: chart-example.local
    #   paths:
    #   - path: /
    #     type: ImplementationSpecific

  # -- Ingress TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- CPU/Memory resource requests/limits
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity settings for pod assignment
affinity: {}

# Plugin Manager Sidecar Container Configuration
pluginsManager:
  # -- Enable plugin manager
  enabled: false
  # -- Plugin configuration file name
  configFile: "plugin.yml"
  # -- Plugin configuration content in YAML format. This is required if plugins.enabled is true.
  configContent: ""
  # -- Base node image to use
  baseImage: node:lts-alpine
  # -- Headlamp plugin package version to install
  version: latest
  # -- Plugin manager env variable configuration
  # env:
  # - name: HTTPS_PROXY
  #   value: "proxy.example.com:8080"
  # -- Specify resources
  # resources:
  #   requests:
  #     cpu: "500m"
  #     memory: "2048Mi"
  #   limits:
  #     cpu: "1000m"
  #     memory: "4096Mi"
  # If omitted, the plugin manager will inherit the global securityContext
  securityContext: {}
    # runAsUser: 1001
    # runAsNonRoot: true
    # allowPrivilegeEscalation: false
    # readOnlyRootFilesystem: true
    # capabilities:
    #   drop:
    #     - ALL
podDisruptionBudget:
  # -- enable PodDisruptionBudget
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  enabled: false
  # @schema
  # type: [null, integer, string]
  # @schema
  # -- Minimum number/percentage of pods that should remain scheduled.
  # When it's set, maxUnavailable must be disabled by `maxUnavailable: null`
  minAvailable: 0
  # @schema
  # type: [null, integer, string]
  # @schema
  # -- Maximum number/percentage of pods that may be made unavailable
  maxUnavailable: null
  # @schema
  # type: [null, string]
  # @schema
  # -- How are unhealthy, but running, pods counted for eviction
  unhealthyPodEvictionPolicy: null

# -- Additional Kubernetes manifests to be deployed. Include the manifest as nested YAML.
extraManifests: []
# - |
#   apiVersion: v1
#   kind: ConfigMap
#   metadata:
#     name: my-config
#   data:
#     key: value
# - |
#   apiVersion: v1
#   kind: ConfigMap
#   metadata:
#     name: my-config-too
#   data:
#     key: value

# ✅ Additional configuration tweaks to stabilize login and frontend rendering
extraArgs:
  - "--in-cluster"         # Ensures backend loads cluster config correctly
  - "--plugins-dir=/headlamp/plugins"
  - "--static-plugins-dir=/headlamp/static-plugins"

# ✅ Enable logging for debugging OIDC issues
extraEnv:
  - name: HEADLAMP_LOG_LEVEL
    value: "debug"
  - name: NODE_ENV
    value: "production"
  - name: HEADLAMP_IN_CLUSTER
    value: "true"

# ✅ Ensure backend knows the cluster API server address if needed
# Uncomment and set manually if running outside cluster
# extraEnv:
#   - name: KUBERNETES_SERVICE_HOST
#     value: "10.245.0.1"
#   - name: KUBERNETES_SERVICE_PORT
#     value: "443"

# ✅ Persistent Volume (optional) for caching kubeconfig
persistentVolume:
  enabled: false
  mountPath: "/home/headlamp/.config/Headlamp"
  size: 1Gi

# ✅ Example of enabling ingress (optional)
# ingress:
#   enabled: true
#   ingressClassName: nginx
#   hosts:
#     - host: headlamp.example.com
#       paths:
#         - path: /
#           type: ImplementationSpecific
#   tls:
#     - secretName: headlamp-tls
#       hosts:
#         - headlamp.example.com

# ✅ Final safety defaults
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

nodeSelector: {}
tolerations: []
affinity: {}

# ✅ Enable ServiceAccount token mount for OIDC login to work
automountServiceAccountToken: true

# ✅ End of file

